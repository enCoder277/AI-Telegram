"""
–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ API llm
–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–¥–µ (message)
—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –ø–∞–º—è—Ç—å —á–∞—Ç–∞
"""

import asyncio
import ollama
import logging
from decouple import config
from elevenlabs import save
from elevenlabs.client import ElevenLabs
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command


# –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = config('TELEGRAM_BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

ELEVENLABS_KEY = config('ELEVENLABS_TOKEN')
client = ElevenLabs(api_key=ELEVENLABS_KEY)

user_choice_voice_or_text = True

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    description = (
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞! ‚ú®\n\n"
        "üí¨ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.\n"
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è, –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ "
        "–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n\n"
        "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º! –í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã? üòä"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üéôÔ∏è", callback_data="set_audio_mode")],
            [InlineKeyboardButton(text="–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üìù", callback_data="set_text_mode")]
        ]
    )
    await message.answer(description, reply_markup=kb)


@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    current_mode = "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üéôÔ∏è" if user_choice_voice_or_text else "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üìù"

    settings_description = (
        f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üìù", callback_data="set_text_mode")],
            [InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üéôÔ∏è", callback_data="set_audio_mode")],
        ]
    )
    await message.answer(settings_description, reply_markup=kb, parse_mode="Markdown")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üõ† **–ü–æ–º–æ—â—å**\n\n"
        "–Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. üòä\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "- `/start`: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
        "- `/help`: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "- `/settings`: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ\n\n"
        "üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å."
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="/start", callback_data="call_cmd_start")],
            [InlineKeyboardButton(text="/settings", callback_data="call_cmd_settings")],
            [InlineKeyboardButton(text="/help", callback_data="call_cmd_help")],
        ]
    )
    await message.answer(help_text, parse_mode="Markdown", reply_markup=kb)


def text_response_ollama(prompt: str, model_name: str = "your_model_name") -> str:
    try:
        response = ollama.chat(model=model_name, messages=[{'role': 'user', 'content': prompt}])
        return response['message']['content']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏."


ollama_voices = client.voices.get_all() #for optimization
def audio_response_ollama(prompt: str, model_name: str = "your_model_name"):
    try:
        text_response = ollama.chat(model=model_name, messages=[{'role': 'user', 'content': prompt}])
        audio_response = client.generate(text=text_response['message']['content'], voice=ollama_voices.voices[3])
        save(audio_response, 'audio_response.mp3')

        return 'audio_response.mp3'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏."


@dp.message(F.text)
async def handle_message(message: types.Message):
    user_text = message.text

    if user_choice_voice_or_text == True:
        ollama_response = audio_response_ollama(user_text, "llama3.1:latest")
        audio_file = FSInputFile(ollama_response, filename='EXAMPLE')
        await message.answer_audio(audio=audio_file)
    if user_choice_voice_or_text == False:
        ollama_response = text_response_ollama(user_text, "llama3.1:latest")
        await message.answer(ollama_response)


@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    global user_choice_voice_or_text
    if callback_query.data == "set_audio_mode":
        user_choice_voice_or_text = True
        await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏! üéôÔ∏è")
    if callback_query.data == "set_text_mode":
        user_choice_voice_or_text = False
        await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º! üìù")

    if callback_query.data == "call_cmd_start":
        await cmd_start(callback_query.message)
    if callback_query.data == "call_cmd_settings":
        await cmd_settings(callback_query.message)
    if callback_query.data == "call_cmd_help":
        await cmd_help(callback_query.message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await bot.answer_callback_query(callback_query.id)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())